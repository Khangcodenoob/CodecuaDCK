<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        1v/l5db/5eXW/+Xl1v/l5db/GRwjwiNI7/8jSO//CxdJwL+/st/l5db/5eXW/+Xl1v/l5db/5eXW/+Xl
        1v9KSkXAGjOt0CNI7/8ZNbDUAAAAeAAAAAAAAAAAAAAAAAAAABQJE0C/I0jv/x08yORSUk2+5eXW/+Xl
        1v/l5db/5eXW/+Xl1v/l5db/5eXW/+Xl1v8SFiPCI0jv/yNI7/8LECjA5eXW/+Xl1v/l5db/5eXW/+Xl
        1v/l5db/5eXW/9zczfUMDx/GI0ju/yNI7/8ECBy/AAAACgAAAAAAAAAAAAAANBAhbMAjSO//Fy2WzIGB
        eMTl5db/5eXW/+Xl1v/l5db/5eXW/+Xl1v/l5db/29vM9QkRNcEjSO//I0jv/xUYJb/l5db/5eXW/+Xl
        1v/l5db/5eXW/+Xl1v/l5db/5eXW/2JiXMEZMqXNI0jv/xctmMsAAABaAAAAAAAAAAAAAABEFCeCxCNI
        7/8TJ4HGmZmPy+Xl1v/l5db/5eXW/+Xl1v/l5db/5eXW/+Xl1v+mppvUDyBowSNI7/8jSO//ISMlwOXl
        1v/l5db/5eXW/+Xl1v/l5db/5eXW/+Xl1v/l5db/0dHD7QkTOL8jSO//Ikbo+AICCKoAAAAAAAAAAAAA
        AEISJn3EI0jv/xIme8WPj4bI5eXW/+Xl1v/l5db/5eXW/+Xl1v/l5db/5eXW/3JyacUYL53NI0jv/yNI
        7vwpKSbC5eXW/+Xl1v/l5db/5eXW/+Xl1v/l5db/5eXW/+Xl1v/l5db/HSAnwCNI7/8jSO//BgwnuQAA
        AAAAAAAAAAAAOBAhbMEjSO//FCqKyIGBeMTl5db/5eXW/+Xl1v/l5db/5eXW/+Xl1v+qqp7WCw4YzCJE
        5vYjSO//I0jv/w0OGsSYmI3Q5eXW/+Xl1v/l5db/5eXW/+Xl1v/l5db/5eXW/+Xl1v89PTrAIkbp9yNI
        7/8IETrAAAAAEwAAAAAAAAAgCxdLvyNI7/8ZNKrTZGRfv+Xl1v/l5db/5eXW/+Xl1v/l5db/2trL9QkN
        G8kiRef2I0jv/yNI7/8jSO//IUTh8ggQNMG4uKzb5eXW/+Xl1v/l5db/5eXW/+Xl1v/l5db/5eXW/1BQ
        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
        AB/4AAA//AAAf/8AAf//wAf///g/////////////
</value>
  </data>
</root>